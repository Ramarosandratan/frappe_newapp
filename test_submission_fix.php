<?php

/**
 * Script de test pour v√©rifier les corrections des erreurs de soumission
 */

echo "=== Test des corrections de soumission ===\n\n";

// Simulation des statuts de documents ERPNext
$DOCSTATUS = [
    0 => 'Draft',
    1 => 'Submitted', 
    2 => 'Cancelled'
];

// Fonction pour simuler la gestion des statuts
function handleDocumentStatus($docstatus, $slipName) {
    global $DOCSTATUS;
    
    echo "üìÑ Traitement de la fiche: $slipName (Status: {$DOCSTATUS[$docstatus]})\n";
    
    switch ($docstatus) {
        case 0: // Draft
            echo "  ‚úì Document en draft - peut √™tre modifi√© directement\n";
            return true;
            
        case 1: // Submitted
            echo "  ‚ö†Ô∏è  Document soumis - doit √™tre annul√© puis modifi√© puis re-soumis\n";
            return true;
            
        case 2: // Cancelled
            echo "  ‚ùå Document annul√© - sera ignor√© (ne peut pas √™tre modifi√©)\n";
            return false;
            
        default:
            echo "  ‚ùì Statut inconnu - sera ignor√©\n";
            return false;
    }
}

// Test 1: Gestion des diff√©rents statuts
echo "Test 1: Gestion des statuts de documents\n";
$testSlips = [
    ['name' => 'Sal Slip/HR-EMP-00001/00001', 'docstatus' => 0],
    ['name' => 'Sal Slip/HR-EMP-00002/00001', 'docstatus' => 1],
    ['name' => 'Sal Slip/HR-EMP-00003/00001', 'docstatus' => 2], // Probl√©matique
    ['name' => 'Sal Slip/HR-EMP-00004/00001', 'docstatus' => 0],
];

$processedCount = 0;
$skippedCount = 0;

foreach ($testSlips as $slip) {
    $canProcess = handleDocumentStatus($slip['docstatus'], $slip['name']);
    if ($canProcess) {
        $processedCount++;
    } else {
        $skippedCount++;
    }
}

echo "\nR√©sultat: $processedCount trait√©s, $skippedCount ignor√©s\n\n";

// Test 2: Validation des totaux
echo "Test 2: Validation des totaux de fiche de paie\n";

function validateSalarySlipTotals($slip) {
    $calculatedEarnings = 0;
    $calculatedDeductions = 0;
    
    foreach ($slip['earnings'] as $earning) {
        $calculatedEarnings += $earning['amount'];
    }
    
    foreach ($slip['deductions'] as $deduction) {
        $calculatedDeductions += $deduction['amount'];
    }
    
    $calculatedNetPay = $calculatedEarnings - $calculatedDeductions;
    $tolerance = 0.01;
    
    $grossPayOk = abs($slip['gross_pay'] - $calculatedEarnings) <= $tolerance;
    $deductionOk = abs($slip['total_deduction'] - $calculatedDeductions) <= $tolerance;
    $netPayOk = abs($slip['net_pay'] - $calculatedNetPay) <= $tolerance;
    
    echo "  üìä Validation des totaux pour {$slip['name']}:\n";
    echo "    Gains: " . ($grossPayOk ? "‚úì" : "‚ùå") . " (Stock√©: {$slip['gross_pay']}, Calcul√©: $calculatedEarnings)\n";
    echo "    D√©ductions: " . ($deductionOk ? "‚úì" : "‚ùå") . " (Stock√©: {$slip['total_deduction']}, Calcul√©: $calculatedDeductions)\n";
    echo "    Net: " . ($netPayOk ? "‚úì" : "‚ùå") . " (Stock√©: {$slip['net_pay']}, Calcul√©: $calculatedNetPay)\n";
    
    return $grossPayOk && $deductionOk && $netPayOk;
}

// Exemple de fiche avec totaux incoh√©rents
$testSlip = [
    'name' => 'Sal Slip/TEST/00001',
    'earnings' => [
        ['salary_component' => 'Salaire de base', 'amount' => 1050.0],
        ['salary_component' => 'Indemnit√©', 'amount' => 200.0]
    ],
    'deductions' => [
        ['salary_component' => 'Taxe sociale', 'amount' => 125.0],
        ['salary_component' => 'Assurance', 'amount' => 50.0]
    ],
    'gross_pay' => 1250.0, // Correct
    'total_deduction' => 175.0, // Correct
    'net_pay' => 1070.0 // Incorrect (devrait √™tre 1075.0)
];

$isValid = validateSalarySlipTotals($testSlip);
echo "  R√©sultat global: " . ($isValid ? "‚úì Valide" : "‚ùå Incoh√©rent") . "\n\n";

// Test 3: Gestion des erreurs sp√©cifiques
echo "Test 3: Gestion des erreurs sp√©cifiques\n";

$errorMessages = [
    "ValidationError: frappe.exceptions.ValidationError: Cannot edit cancelled document",
    "TimestampMismatchError: Document has been modified",
    "ValidationError: Total earnings do not match",
    "RuntimeException: Network timeout"
];

foreach ($errorMessages as $error) {
    echo "  üîç Analyse de l'erreur: " . substr($error, 0, 50) . "...\n";
    
    if (strpos($error, 'Cannot edit cancelled document') !== false) {
        echo "    ‚Üí Action: Ignorer la fiche (document annul√©)\n";
    } elseif (strpos($error, 'TimestampMismatchError') !== false) {
        echo "    ‚Üí Action: Retry avec d√©lai\n";
    } elseif (strpos($error, 'ValidationError') !== false) {
        echo "    ‚Üí Action: V√©rifier et corriger les donn√©es\n";
    } else {
        echo "    ‚Üí Action: Logger l'erreur et continuer\n";
    }
}

echo "\n";

// Test 4: Simulation d'application de pourcentages mensuels
echo "Test 4: Application s√©curis√©e des pourcentages mensuels\n";

function applyMonthlyPercentageSafely($baseValue, $percentage, $month, $component) {
    // Validations
    if ($month < 1 || $month > 12) {
        echo "    ‚ö†Ô∏è  Mois invalide ($month), utilisation de la valeur de base\n";
        return $baseValue;
    }
    
    if ($baseValue < 0) {
        echo "    ‚ö†Ô∏è  Valeur de base n√©gative ($baseValue), utilisation de la valeur de base\n";
        return $baseValue;
    }
    
    // Limitation des pourcentages
    $originalPercentage = $percentage;
    if ($percentage < -100) $percentage = -100;
    if ($percentage > 1000) $percentage = 1000;
    
    if ($originalPercentage !== $percentage) {
        echo "    ‚ö†Ô∏è  Pourcentage limit√© de $originalPercentage% √† $percentage%\n";
    }
    
    $newValue = $baseValue * (1 + ($percentage / 100));
    
    // √âviter les valeurs n√©gatives
    if ($newValue < 0) {
        echo "    ‚ö†Ô∏è  Valeur calcul√©e n√©gative, mise √† 0\n";
        $newValue = 0;
    }
    
    return round($newValue, 2);
}

$testCases = [
    ['base' => 1000, 'percentage' => 5, 'month' => 1, 'component' => 'Salaire de base'],
    ['base' => 1000, 'percentage' => -150, 'month' => 2, 'component' => 'Salaire de base'], // Trop bas
    ['base' => -500, 'percentage' => 10, 'month' => 3, 'component' => 'Salaire de base'], // Base n√©gative
    ['base' => 1000, 'percentage' => 10, 'month' => 13, 'component' => 'Salaire de base'], // Mois invalide
];

foreach ($testCases as $test) {
    echo "  üìä Test: Base={$test['base']}, Pourcentage={$test['percentage']}%, Mois={$test['month']}\n";
    $result = applyMonthlyPercentageSafely($test['base'], $test['percentage'], $test['month'], $test['component']);
    echo "    R√©sultat: $result\n";
}

echo "\n=== Tests termin√©s ===\n";
echo "‚úÖ Les corrections impl√©ment√©es devraient r√©soudre les erreurs de soumission\n";
echo "üìã Points cl√©s:\n";
echo "  ‚Ä¢ Les fiches annul√©es sont maintenant ignor√©es\n";
echo "  ‚Ä¢ Les totaux sont valid√©s avant sauvegarde\n";
echo "  ‚Ä¢ Les pourcentages sont limit√©s et valid√©s\n";
echo "  ‚Ä¢ Les erreurs sont mieux g√©r√©es et logg√©es\n";