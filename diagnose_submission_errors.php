<?php

/**
 * Script de diagnostic pour les erreurs de soumission des fiches de paie
 * Analyse les logs et identifie les probl√®mes courants
 */

echo "=== Diagnostic des erreurs de soumission ===\n\n";

// Fonction pour analyser les logs
function analyzeLogs($logFile) {
    if (!file_exists($logFile)) {
        echo "‚ùå Fichier de log non trouv√©: $logFile\n";
        return;
    }
    
    echo "üìã Analyse du fichier: $logFile\n";
    
    $content = file_get_contents($logFile);
    $lines = explode("\n", $content);
    
    $errors = [];
    $warnings = [];
    $salarySlipErrors = [];
    
    foreach ($lines as $line) {
        if (empty(trim($line))) continue;
        
        // Rechercher les erreurs li√©es aux fiches de paie
        if (stripos($line, 'salary slip') !== false || stripos($line, 'salary_slip') !== false) {
            if (stripos($line, 'ERROR') !== false) {
                $salarySlipErrors[] = $line;
            } elseif (stripos($line, 'WARNING') !== false) {
                $warnings[] = $line;
            }
        }
        
        // Rechercher les erreurs de soumission sp√©cifiques
        if (stripos($line, 'submit') !== false && stripos($line, 'ERROR') !== false) {
            $errors[] = $line;
        }
        
        // Rechercher les erreurs de validation
        if (stripos($line, 'ValidationError') !== false || stripos($line, 'TimestampMismatchError') !== false) {
            $errors[] = $line;
        }
    }
    
    echo "  üîç Erreurs de fiches de paie trouv√©es: " . count($salarySlipErrors) . "\n";
    echo "  ‚ö†Ô∏è  Avertissements trouv√©s: " . count($warnings) . "\n";
    echo "  ‚ùå Erreurs de soumission trouv√©es: " . count($errors) . "\n\n";
    
    // Afficher les derni√®res erreurs
    if (!empty($salarySlipErrors)) {
        echo "  üìÑ Derni√®res erreurs de fiches de paie:\n";
        foreach (array_slice($salarySlipErrors, -5) as $error) {
            echo "    " . substr($error, 0, 150) . "...\n";
        }
        echo "\n";
    }
    
    if (!empty($errors)) {
        echo "  üö® Derni√®res erreurs de soumission:\n";
        foreach (array_slice($errors, -3) as $error) {
            echo "    " . substr($error, 0, 150) . "...\n";
        }
        echo "\n";
    }
    
    return [
        'salary_slip_errors' => count($salarySlipErrors),
        'warnings' => count($warnings),
        'submission_errors' => count($errors)
    ];
}

// Analyser les logs principaux
$logFiles = [
    '/home/rina/frappe_newapp/var/log/dev.log',
    '/home/rina/frappe_newapp/var/log/prod.log',
    '/home/rina/frappe_newapp/server.log'
];

$totalErrors = 0;
foreach ($logFiles as $logFile) {
    $result = analyzeLogs($logFile);
    if ($result) {
        $totalErrors += $result['salary_slip_errors'] + $result['submission_errors'];
    }
}

// V√©rifications de configuration
echo "üîß V√©rifications de configuration:\n\n";

// 1. V√©rifier les variables d'environnement ERPNext
$envFile = '/home/rina/frappe_newapp/.env';
if (file_exists($envFile)) {
    $envContent = file_get_contents($envFile);
    $hasErpNextConfig = strpos($envContent, 'ERPNEXT_API_BASE') !== false;
    echo "  ‚úì Fichier .env trouv√©\n";
    echo "  " . ($hasErpNextConfig ? "‚úì" : "‚ùå") . " Configuration ERPNext pr√©sente\n";
} else {
    echo "  ‚ùå Fichier .env non trouv√©\n";
}

// 2. V√©rifier la structure des services
$serviceFiles = [
    '/home/rina/frappe_newapp/src/Service/ErpNextService.php',
    '/home/rina/frappe_newapp/src/Service/MonthlyPercentageService.php',
    '/home/rina/frappe_newapp/src/Controller/SalaryModifierController.php'
];

echo "\nüìÅ V√©rification des fichiers de service:\n";
foreach ($serviceFiles as $file) {
    $exists = file_exists($file);
    echo "  " . ($exists ? "‚úì" : "‚ùå") . " " . basename($file) . "\n";
    
    if ($exists) {
        $content = file_get_contents($file);
        $hasValidation = strpos($content, 'validateSalarySlipTotals') !== false || 
                        strpos($content, 'validateSalarySlipData') !== false;
        echo "    " . ($hasValidation ? "‚úì" : "‚ö†Ô∏è ") . " M√©thodes de validation pr√©sentes\n";
    }
}

// 3. Probl√®mes courants identifi√©s
echo "\nüîç Probl√®mes courants identifi√©s:\n\n";

$commonIssues = [
    "Totaux incoh√©rents" => "Les totaux (gross_pay, total_deduction, net_pay) ne correspondent pas aux composants individuels",
    "Erreurs de timestamp" => "TimestampMismatchError lors de la soumission - probl√®me de concurrence",
    "Validation ERPNext" => "ERPNext rejette la soumission √† cause de donn√©es invalides",
    "Pourcentages extr√™mes" => "Application de pourcentages trop √©lev√©s ou trop bas",
    "Valeurs n√©gatives" => "Calculs r√©sultant en valeurs n√©gatives non autoris√©es"
];

foreach ($commonIssues as $issue => $description) {
    echo "  üìå $issue:\n";
    echo "     $description\n\n";
}

// Solutions recommand√©es
echo "üí° Solutions recommand√©es:\n\n";

$solutions = [
    "1. Validation des donn√©es" => [
        "Utiliser validateSalarySlipTotals() avant chaque sauvegarde",
        "V√©rifier la coh√©rence des montants avec une tol√©rance de 0.01",
        "S'assurer que tous les champs obligatoires sont pr√©sents"
    ],
    "2. Gestion des erreurs" => [
        "Impl√©menter un retry avec d√©lai pour les TimestampMismatchError",
        "Logger toutes les erreurs avec le contexte complet",
        "Continuer le traitement m√™me si une fiche √©choue"
    ],
    "3. Optimisation des pourcentages" => [
        "Limiter les pourcentages entre -100% et +1000%",
        "Valider les mois (1-12) et les valeurs de base (>= 0)",
        "Arrondir les r√©sultats √† 2 d√©cimales"
    ],
    "4. Tests et monitoring" => [
        "Ex√©cuter validate_monthly_percentages.php r√©guli√®rement",
        "Surveiller les logs pour les patterns d'erreur",
        "Tester avec un petit √©chantillon avant application massive"
    ]
];

foreach ($solutions as $category => $items) {
    echo "  $category:\n";
    foreach ($items as $item) {
        echo "    ‚Ä¢ $item\n";
    }
    echo "\n";
}

// Commandes utiles
echo "üõ†Ô∏è  Commandes utiles pour le d√©bogage:\n\n";
echo "  # Voir les derni√®res erreurs de fiches de paie\n";
echo "  tail -f var/log/dev.log | grep -i 'salary.*slip'\n\n";
echo "  # Rechercher les erreurs de soumission\n";
echo "  grep -i 'submit.*error' var/log/dev.log | tail -10\n\n";
echo "  # Valider la logique des pourcentages\n";
echo "  php validate_monthly_percentages.php\n\n";
echo "  # V√©rifier la base de donn√©es\n";
echo "  php bin/console doctrine:schema:validate\n\n";

if ($totalErrors > 0) {
    echo "‚ö†Ô∏è  $totalErrors erreurs d√©tect√©es dans les logs. Consultez les d√©tails ci-dessus.\n";
} else {
    echo "‚úÖ Aucune erreur majeure d√©tect√©e dans les logs r√©cents.\n";
}

echo "\n=== Diagnostic termin√© ===\n";