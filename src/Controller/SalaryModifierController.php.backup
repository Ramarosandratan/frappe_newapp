<?php

namespace App\Controller;

use App\Service\ErpNextService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Psr\Log\LoggerInterface;

class SalaryModifierController extends AbstractController
{
    private $erpNextService;
    private $logger;

    public function __construct(ErpNextService $erpNextService, LoggerInterface $logger)
    {
        $this->erpNextService = $erpNextService;
        $this->logger = $logger;
    }

    #[Route('/salary/modifier', name: 'app_salary_modifier')]
    public function index(Request $request): Response
    {
        // Récupérer tous les composants de salaire disponibles
        $salaryComponents = $this->erpNextService->getSalaryComponents();
        
        // Conditions disponibles
        $conditions = [
            '=' => 'Égal à',
            '>' => 'Supérieur à',
            '<' => 'Inférieur à',
            '>=' => 'Supérieur ou égal à',
            '<=' => 'Inférieur ou égal à',
            '!=' => 'Différent de'
        ];
        
        // Si le formulaire est soumis
        if ($request->isMethod('POST')) {
            try {
                // Récupérer les paramètres du formulaire
                $component = $request->request->get('component');
                $condition = $request->request->get('condition');
                $conditionValue = $request->request->get('condition_value');
                $newValue = $request->request->get('new_value');
                $startDate = $request->request->get('start_date');
                $endDate = $request->request->get('end_date');
                
                $this->logger->info("Form parameters received", [
                    'component' => $component,
                    'condition' => $condition,
                    'condition_value_raw' => $conditionValue,
                    'new_value_raw' => $newValue,
                    'start_date' => $startDate,
                    'end_date' => $endDate
                ]);
                
                // Valider les entrées
                if (!$component || !$condition || $conditionValue === null || $newValue === null) {
                    throw new \InvalidArgumentException("Tous les champs sont requis");
                }
                
                // Convertir en nombres si nécessaire
                $conditionValue = is_numeric($conditionValue) ? (float)$conditionValue : $conditionValue;
                $newValue = is_numeric($newValue) ? (float)$newValue : $newValue;
                
                $this->logger->info("Form parameters after conversion", [
                    'component' => $component,
                    'condition' => $condition,
                    'condition_value_converted' => $conditionValue,
                    'new_value_converted' => $newValue,
                    'condition_value_type' => gettype($conditionValue),
                    'new_value_type' => gettype($newValue)
                ]);
                
                // Récupérer toutes les fiches de paie pour la période spécifiée
                $startDateTime = new \DateTime($startDate);
                $endDateTime = new \DateTime($endDate);
                
                $salarySlipsList = $this->erpNextService->getSalarySlipsByPeriod(
                    $startDateTime->format('Y-m-d'),
                    $endDateTime->format('Y-m-d')
                );
                
                $this->logger->info("Found salary slips for modification", [
                    'count' => count($salarySlipsList),
                    'period' => $startDate . ' to ' . $endDate
                ]);
                
                // Vérifier si des fiches de paie ont été trouvées
                if (empty($salarySlipsList)) {
                    $this->addFlash('warning', sprintf(
                        'Aucune fiche de paie trouvée pour la période du %s au %s.',
                        $startDate,
                        $endDate
                    ));
                    return $this->redirectToRoute('app_salary_modifier');
                }
                
                $modifiedCount = 0;
                $skippedCount = 0;
                $errorCount = 0;
                
                foreach ($salarySlipsList as $slipSummary) {
                    try {
                        // Récupérer les détails complets de la fiche de paie
                        $slip = $this->erpNextService->getSalarySlipDetails($slipSummary['name']);
                        
                        if (!$slip) {
                            $this->logger->warning("Could not retrieve details for salary slip", [
                                'slip_name' => $slipSummary['name']
                            ]);
                            $errorCount++;
                            continue;
                        }
                        
                        $modified = false;
                        $componentFound = false;
                        
                        // Log des composants disponibles pour débogage
                        $availableEarnings = [];
                        $availableDeductions = [];
                        
                        if (isset($slip['earnings'])) {
                            foreach ($slip['earnings'] as $earning) {
                                $availableEarnings[] = $earning['salary_component'] . ' (' . $earning['amount'] . ')';
                            }
                        }
                        
                        if (isset($slip['deductions'])) {
                            foreach ($slip['deductions'] as $deduction) {
                                $availableDeductions[] = $deduction['salary_component'] . ' (' . $deduction['amount'] . ')';
                            }
                        }
                        

                        
                        // Vérifier si le composant existe dans les gains
                        if (isset($slip['earnings'])) {
                            foreach ($slip['earnings'] as $index => $earning) {
                                if ($earning['salary_component'] === $component) {
                                    $componentFound = true;
                                    // Vérifier la condition
                                    $currentValue = $earning['amount'];
                                    

                                    
                                    if ($this->checkCondition($currentValue, $condition, $conditionValue)) {
                                        // Modifier la valeur
                                        $slip['earnings'][$index]['amount'] = $newValue;
                                        $modified = true;
                                        
                                        $this->logger->info("Modified earning component", [
                                            'slip' => $slip['name'],
                                            'component' => $component,
                                            'old_value' => $currentValue,
                                            'new_value' => $newValue
                                        ]);
                                        
                                        // Recalculer les composants dépendants selon le composant modifié
                                        $this->handleComponentDependencies($slip, $component, $newValue);
                                    }
                                }
                            }
                        }
                        
                        // Vérifier si le composant existe dans les déductions
                        if (isset($slip['deductions'])) {
                            foreach ($slip['deductions'] as $index => $deduction) {
                                if ($deduction['salary_component'] === $component) {
                                    $componentFound = true;
                                    // Vérifier la condition
                                    $currentValue = $deduction['amount'];
                                    

                                    
                                    if ($this->checkCondition($currentValue, $condition, $conditionValue)) {
                                        // Modifier la valeur
                                        $slip['deductions'][$index]['amount'] = $newValue;
                                        $modified = true;
                                        
                                        $this->logger->info("Modified deduction component", [
                                            'slip' => $slip['name'],
                                            'component' => $component,
                                            'old_value' => $currentValue,
                                            'new_value' => $newValue
                                        ]);
                                        
                                        // Recalculer les composants dépendants selon le composant modifié
                                        $this->handleComponentDependencies($slip, $component, $newValue);
                                    }
                                }
                            }
                        }
                        

                        
                        // Si des modifications ont été apportées, mettre à jour la fiche de paie
                        if ($modified) {
                            // Recalculer les totaux finaux après toutes les modifications
                            $this->recalculateSalarySlipTotals($slip);
                            
                            $this->erpNextService->updateSalarySlip($slip);
                            $modifiedCount++;
                        } else {
                            $skippedCount++;
                        }
                    } catch (\Exception $e) {
                        $this->logger->error("Failed to modify salary slip", [
                            'slip' => $slipSummary['name'] ?? 'unknown',
                            'error' => $e->getMessage(),
                            'trace' => $e->getTraceAsString()
                        ]);
                        
                        $errorCount++;
                    }
                }
                
                // Afficher un message de succès
                if ($modifiedCount > 0) {
                    $this->addFlash('success', sprintf(
                        '%d fiches de paie modifiées avec succès sur %d fiches analysées. %d ignorées (condition non respectée). %d erreurs.',
                        $modifiedCount,
                        count($salarySlipsList),
                        $skippedCount,
                        $errorCount
                    ));
                } else {
                    $this->addFlash('warning', sprintf(
                        'Aucune fiche de paie modifiée sur %d fiches analysées. %d ignorées (condition non respectée). %d erreurs.',
                        count($salarySlipsList),
                        $skippedCount,
                        $errorCount
                    ));
                }
                
                return $this->redirectToRoute('app_salary_modifier');
            } catch (\Exception $e) {
                $this->logger->error("Salary modification failed", [
                    'error' => $e->getMessage(),
                    'trace' => $e->getTraceAsString()
                ]);
                
                $this->addFlash('error', 'Erreur lors de la modification des fiches de paie: ' . $e->getMessage());
            }
        }
        
        return $this->render('salary_modifier/index.html.twig', [
            'salaryComponents' => $salaryComponents,
            'conditions' => $conditions
        ]);
    }
    
    /**
     * Vérifie si une valeur respecte une condition
     */
    private function checkCondition($value, $condition, $conditionValue): bool
    {
        // Convertir les valeurs en float pour assurer une comparaison numérique correcte
        $numericValue = is_numeric($value) ? (float)$value : $value;
        $numericConditionValue = is_numeric($conditionValue) ? (float)$conditionValue : $conditionValue;
        

        
        $result = false;
        switch ($condition) {
            case '=':
                $result = $numericValue == $numericConditionValue;
                break;
            case '>':
                $result = $numericValue > $numericConditionValue;
                break;
            case '<':
                $result = $numericValue < $numericConditionValue;
                break;
            case '>=':
                $result = $numericValue >= $numericConditionValue;
                break;
            case '<=':
                $result = $numericValue <= $numericConditionValue;
                break;
            case '!=':
                $result = $numericValue != $numericConditionValue;
                break;
            default:
                $result = false;
        }
        

        
        return $result;
    }
    
    /**
     * Récupère les formules des composants depuis ERPNext
     */
    private function getComponentFormulas(array $slip): array
    {
        $formulas = [];
        
        // Récupérer les formules depuis les earnings
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $earning) {
                $component = $earning['salary_component'];
                $formula = $earning['formula'] ?? null;
                $isFormulaComponent = ($earning['amount_based_on_formula'] ?? 0) == 1;
                
                if ($isFormulaComponent && $formula) {
                    $formulas[$component] = $formula;
                }
            }
        }
        
        // Récupérer les formules depuis les deductions
        if (isset($slip['deductions'])) {
            foreach ($slip['deductions'] as $deduction) {
                $component = $deduction['salary_component'];
                $formula = $deduction['formula'] ?? null;
                $isFormulaComponent = ($deduction['amount_based_on_formula'] ?? 0) == 1;
                
                if ($isFormulaComponent && $formula) {
                    $formulas[$component] = $formula;
                }
            }
        }
        
        $this->logger->info("Retrieved component formulas", [
            'slip' => $slip['name'],
            'formulas' => $formulas
        ]);
        
        return $formulas;
    }
    
    /**
     * Gère les dépendances entre composants selon le composant modifié
     */
    private function handleComponentDependencies(array &$slip, string $modifiedComponent, float $newValue): void
    {
        $this->logger->info("Handling component dependencies", [
            'slip' => $slip['name'],
            'modified_component' => $modifiedComponent,
            'new_value' => $newValue
        ]);
        
        // Récupérer les formules dynamiquement depuis ERPNext
        $formulas = $this->getComponentFormulas($slip);
        
        // Recalculer tous les composants qui dépendent du composant modifié
        $this->recalculateAllDependentComponents($slip, $modifiedComponent, $newValue, $formulas);
    }
    
    /**
     * Recalcule tous les composants dépendants en utilisant les formules dynamiques
     */
    private function recalculateAllDependentComponents(array &$slip, string $modifiedComponent, float $newValue, array $formulas): void
    {
        $this->logger->info("Recalculating all dependent components with dynamic formulas", [
            'slip' => $slip['name'],
            'modified_component' => $modifiedComponent,
            'new_value' => $newValue,
            'available_formulas' => array_keys($formulas)
        ]);
        
        // Créer un tableau des valeurs actuelles des composants pour l'évaluation des formules
        $componentValues = $this->getComponentValues($slip);
        
        // Mettre à jour la valeur du composant modifié
        $componentAbbr = $this->getComponentAbbreviation($slip, $modifiedComponent);
        if ($componentAbbr) {
            $componentValues[$componentAbbr] = $newValue;
        }
        
        // Recalculer tous les composants qui ont des formules
        foreach ($formulas as $componentName => $formula) {
            // Ne pas recalculer le composant qu'on vient de modifier
            if ($componentName === $modifiedComponent) {
                continue;
            }
            
            try {
                $newAmount = $this->evaluateFormula($formula, $componentValues);
                $this->updateComponentAmount($slip, $componentName, $newAmount);
                
                // Mettre à jour les valeurs pour les prochains calculs
                $abbr = $this->getComponentAbbreviation($slip, $componentName);
                if ($abbr) {
                    $componentValues[$abbr] = $newAmount;
                }
                
                $this->logger->info("Recalculated component using dynamic formula", [
                    'slip' => $slip['name'],
                    'component' => $componentName,
                    'formula' => $formula,
                    'new_amount' => $newAmount,
                    'component_values_used' => $componentValues
                ]);
                
            } catch (\Exception $e) {
                $this->logger->error("Failed to recalculate component with formula", [
                    'slip' => $slip['name'],
                    'component' => $componentName,
                    'formula' => $formula,
                    'error' => $e->getMessage()
                ]);
            }
        }
        
        // Recalculer les totaux finaux
        $this->recalculateSalarySlipTotals($slip);
    }
    
    /**
     * Récupère les valeurs actuelles de tous les composants
     */
    private function getComponentValues(array $slip): array
    {
        $values = [];
        
        // Récupérer les valeurs des earnings
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $earning) {
                $abbr = $earning['abbr'] ?? null;
                if ($abbr) {
                    $values[$abbr] = $earning['amount'];
                }
            }
        }
        
        // Récupérer les valeurs des deductions
        if (isset($slip['deductions'])) {
            foreach ($slip['deductions'] as $deduction) {
                $abbr = $deduction['abbr'] ?? null;
                if ($abbr) {
                    $values[$abbr] = $deduction['amount'];
                }
            }
        }
        
        return $values;
    }
    
    /**
     * Récupère l'abréviation d'un composant
     */
    private function getComponentAbbreviation(array $slip, string $componentName): ?string
    {
        // Chercher dans les earnings
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $earning) {
                if ($earning['salary_component'] === $componentName) {
                    return $earning['abbr'] ?? null;
                }
            }
        }
        
        // Chercher dans les deductions
        if (isset($slip['deductions'])) {
            foreach ($slip['deductions'] as $deduction) {
                if ($deduction['salary_component'] === $componentName) {
                    return $deduction['abbr'] ?? null;
                }
            }
        }
        
        return null;
    }
    
    /**
     * Évalue une formule avec les valeurs des composants
     */
    private function evaluateFormula(string $formula, array $componentValues): float
    {
        // Remplacer les abréviations par leurs valeurs dans la formule
        $evaluableFormula = $formula;
        foreach ($componentValues as $abbr => $value) {
            $evaluableFormula = str_replace($abbr, (string)$value, $evaluableFormula);
        }
        
        // Sécurité : vérifier que la formule ne contient que des opérations mathématiques autorisées
        if (!preg_match('/^[0-9+\-*\/\(\)\.\s]+$/', $evaluableFormula)) {
            throw new \InvalidArgumentException("Formula contains invalid characters: " . $evaluableFormula);
        }
        
        // Évaluer la formule
        $result = eval("return $evaluableFormula;");
        
        if ($result === false || !is_numeric($result)) {
            throw new \RuntimeException("Formula evaluation failed: " . $evaluableFormula);
        }
        
        return (float)$result;
    }
    
    /**
     * Met à jour le montant d'un composant dans la fiche de paie
     */
    private function updateComponentAmount(array &$slip, string $componentName, float $newAmount): void
    {
        // Mettre à jour dans les earnings
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $index => $earning) {
                if ($earning['salary_component'] === $componentName) {
                    $oldAmount = $earning['amount'];
                    $slip['earnings'][$index]['amount'] = $newAmount;
                    
                    $this->logger->info("Updated earning component amount", [
                        'slip' => $slip['name'],
                        'component' => $componentName,
                        'old_amount' => $oldAmount,
                        'new_amount' => $newAmount
                    ]);
                    return;
                }
            }
        }
        
        // Mettre à jour dans les deductions
        if (isset($slip['deductions'])) {
            foreach ($slip['deductions'] as $index => $deduction) {
                if ($deduction['salary_component'] === $componentName) {
                    $oldAmount = $deduction['amount'];
                    $slip['deductions'][$index]['amount'] = $newAmount;
                    
                    $this->logger->info("Updated deduction component amount", [
                        'slip' => $slip['name'],
                        'component' => $componentName,
                        'old_amount' => $oldAmount,
                        'new_amount' => $newAmount
                    ]);
                    return;
                }
            }
        }
    }
    

    
    /**
     * Recalcule les composants dépendants de l'Indemnité
     */
    private function recalculateFromIndemnite(array &$slip, float $newIndemnite): void
    {
        $this->logger->info("Recalculating from Indemnité change", [
            'slip' => $slip['name'],
            'new_indemnite' => $newIndemnite
        ]);
        
        // Récupérer le Salaire Base actuel
        $currentSalaireBase = 0;
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $earning) {
                if ($earning['salary_component'] === 'Salaire Base') {
                    $currentSalaireBase = $earning['amount'];
                    break;
                }
            }
        }
        
        // Recalculer la Taxe sociale avec la nouvelle Indemnité
        $newTaxeSociale = ($currentSalaireBase + $newIndemnite) * 0.2;
        
        // Mettre à jour la Taxe sociale dans les deductions
        if (isset($slip['deductions'])) {
            foreach ($slip['deductions'] as $index => $deduction) {
                if ($deduction['salary_component'] === 'Taxe sociale') {
                    $oldTaxeSociale = $deduction['amount'];
                    $slip['deductions'][$index]['amount'] = $newTaxeSociale;
                    
                    $this->logger->info("Recalculated Taxe sociale from Indemnité change", [
                        'slip' => $slip['name'],
                        'old_value' => $oldTaxeSociale,
                        'new_value' => $newTaxeSociale,
                        'formula' => '(SB + IND) * 0.2',
                        'salaire_base' => $currentSalaireBase,
                        'indemnite' => $newIndemnite
                    ]);
                    break;
                }
            }
        }
        
        // Recalculer les totaux de la fiche de paie
        $this->recalculateSalarySlipTotals($slip);
    }
    
    /**
     * Recalcule rétroactivement depuis la Taxe sociale (recalcul bidirectionnel)
     */
    private function recalculateFromTaxeSociale(array &$slip, float $newTaxeSociale): void
    {
        $this->logger->info("Recalculating backwards from Taxe sociale", [
            'slip' => $slip['name'],
            'new_taxe_sociale' => $newTaxeSociale
        ]);
        
        // Formule inverse : (SB + IND) = TS / 0.2
        $totalSalaireBaseIndemnite = $newTaxeSociale / 0.2;
        
        // Récupérer le ratio actuel SB/IND pour maintenir la proportion
        $currentSalaireBase = 0;
        $currentIndemnite = 0;
        
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $earning) {
                if ($earning['salary_component'] === 'Salaire Base') {
                    $currentSalaireBase = $earning['amount'];
                } elseif ($earning['salary_component'] === 'Indemnité') {
                    $currentIndemnite = $earning['amount'];
                }
            }
        }
        
        // Calculer le nouveau Salaire Base et Indemnité en maintenant le ratio 70/30
        // SB = 70% du total, IND = 30% du total
        $newSalaireBase = $totalSalaireBaseIndemnite * (10/13); // 10/13 ≈ 0.769 (car SB/(SB+IND) quand IND=SB*0.3)
        $newIndemnite = $totalSalaireBaseIndemnite * (3/13);    // 3/13 ≈ 0.231
        
        // Mettre à jour le Salaire Base
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $index => $earning) {
                if ($earning['salary_component'] === 'Salaire Base') {
                    $slip['earnings'][$index]['amount'] = $newSalaireBase;
                    
                    $this->logger->info("Recalculated Salaire Base from Taxe sociale", [
                        'slip' => $slip['name'],
                        'old_value' => $currentSalaireBase,
                        'new_value' => $newSalaireBase,
                        'calculation' => 'Backward from TS'
                    ]);
                    break;
                }
            }
        }
        
        // Mettre à jour l'Indemnité
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $index => $earning) {
                if ($earning['salary_component'] === 'Indemnité') {
                    $slip['earnings'][$index]['amount'] = $newIndemnite;
                    
                    $this->logger->info("Recalculated Indemnité from Taxe sociale", [
                        'slip' => $slip['name'],
                        'old_value' => $currentIndemnite,
                        'new_value' => $newIndemnite,
                        'calculation' => 'Backward from TS'
                    ]);
                    break;
                }
            }
        }
        
        // Recalculer les totaux de la fiche de paie
        $this->recalculateSalarySlipTotals($slip);
    }
    
    /**
     * Recalcule la Taxe sociale basée sur tous les composants earnings
     */
    private function recalculateTaxeSocialeFromAllComponents(array &$slip): void
    {
        $this->logger->info("Recalculating Taxe sociale from all components", [
            'slip' => $slip['name']
        ]);
        
        // Calculer le total de tous les earnings (gains)
        $totalEarnings = 0;
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $earning) {
                $totalEarnings += $earning['amount'];
            }
        }
        
        // Calculer la nouvelle Taxe sociale (20% du total des gains)
        $newTaxeSociale = $totalEarnings * 0.2;
        
        // Mettre à jour la Taxe sociale dans les deductions
        if (isset($slip['deductions'])) {
            foreach ($slip['deductions'] as $index => $deduction) {
                if ($deduction['salary_component'] === 'Taxe sociale') {
                    $oldTaxeSociale = $deduction['amount'];
                    $slip['deductions'][$index]['amount'] = $newTaxeSociale;
                    
                    $this->logger->info("Recalculated Taxe sociale from all earnings", [
                        'slip' => $slip['name'],
                        'old_value' => $oldTaxeSociale,
                        'new_value' => $newTaxeSociale,
                        'total_earnings' => $totalEarnings,
                        'formula' => 'Total Earnings * 0.2'
                    ]);
                    break;
                }
            }
        }
        
        // Recalculer les totaux de la fiche de paie
        $this->recalculateSalarySlipTotals($slip);
    }
    
    /**
     * Recalcule les totaux de la fiche de paie
     */
    private function recalculateSalarySlipTotals(array &$slip): void
    {
        $totalEarnings = 0;
        $totalDeductions = 0;
        
        // Calculer le total des gains
        if (isset($slip['earnings'])) {
            foreach ($slip['earnings'] as $earning) {
                $totalEarnings += $earning['amount'];
            }
        }
        
        // Calculer le total des déductions
        if (isset($slip['deductions'])) {
            foreach ($slip['deductions'] as $deduction) {
                $totalDeductions += $deduction['amount'];
            }
        }
        
        // Mettre à jour les totaux dans la fiche de paie
        $oldGrossPay = $slip['gross_pay'] ?? 0;
        $oldNetPay = $slip['net_pay'] ?? 0;
        $oldTotalDeduction = $slip['total_deduction'] ?? 0;
        
        $slip['gross_pay'] = $totalEarnings;
        $slip['base_gross_pay'] = $totalEarnings;
        $slip['total_deduction'] = $totalDeductions;
        $slip['base_total_deduction'] = $totalDeductions;
        $slip['net_pay'] = $totalEarnings - $totalDeductions;
        $slip['base_net_pay'] = $totalEarnings - $totalDeductions;
        $slip['rounded_total'] = $totalEarnings - $totalDeductions;
        $slip['base_rounded_total'] = $totalEarnings - $totalDeductions;
        
        $this->logger->info("Recalculated salary slip totals", [
            'slip' => $slip['name'],
            'old_gross_pay' => $oldGrossPay,
            'new_gross_pay' => $slip['gross_pay'],
            'old_total_deduction' => $oldTotalDeduction,
            'new_total_deduction' => $slip['total_deduction'],
            'old_net_pay' => $oldNetPay,
            'new_net_pay' => $slip['net_pay']
        ]);
    }
}