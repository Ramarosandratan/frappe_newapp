<?php

// Inclut l'autoloader de Composer pour charger les d√©pendances du projet.
require_once __DIR__ . '/vendor/autoload.php';

// Importe les classes n√©cessaires depuis leurs namespaces respectifs.
use App\Service\ErpNextService; // Service pour interagir avec l'API ERPNext.
use Symfony\Component\HttpClient\HttpClient; // Client HTTP pour effectuer des requ√™tes.
use Monolog\Logger; // Classe pour la journalisation (logging).
use Monolog\Handler\StreamHandler; // Handler pour √©crire les logs dans un flux (ici, la console).

// Section de configuration pour l'acc√®s √† l'API ERPNext.
// Ces valeurs doivent √™tre adapt√©es √† votre environnement ERPNext.
$erpNextUrl = 'http://localhost:8000'; // URL de base de votre instance ERPNext.
$apiKey = 'your-api-key'; // Cl√© API pour l'authentification.
$apiSecret = 'your-api-secret'; // Secret API correspondant √† la cl√©.

try {
    // Initialisation du logger.
    // Cr√©e une instance de Logger nomm√©e 'debug'.
    $logger = new Logger('debug');
    // Ajoute un handler pour diriger les messages de log (√† partir du niveau DEBUG) vers la sortie standard (console).
    $logger->pushHandler(new StreamHandler('php://stdout', Logger::DEBUG));
    
    // Initialisation du client HTTP et du service ERPNext.
    $httpClient = HttpClient::create(); // Cr√©e une instance du client HTTP.
    // Instancie le service ERPNext en lui passant le client HTTP et le logger.
    $erpNextService = new ErpNextService($httpClient, $logger);
    // D√©finit les identifiants de connexion (URL, cl√© API, secret API) pour le service ERPNext.
    $erpNextService->setCredentials($erpNextUrl, $apiKey, $apiSecret);
    
    // Affiche un titre pour le diagnostic.
    echo "üîç Diagnostic des Statistiques de Fiches de Paie\n\n";
    
    // 1. V√©rification des fiches de paie pour le mois en cours.
    // D√©finit les dates de d√©but et de fin pour le mois actuel.
    $currentMonth = date('Y-m-01'); // Premier jour du mois courant.
    $endOfMonth = date('Y-m-t'); // Dernier jour du mois courant.
    $currentYear = date('Y'); // Ann√©e courante.
    
    // Affiche la p√©riode et l'ann√©e analys√©es.
    echo "üìÖ P√©riode analys√©e: $currentMonth √† $endOfMonth\n";
    echo "üìÖ Ann√©e courante: $currentYear\n";
    echo "=" . str_repeat("=", 60) . "\n";
    
    // Test de la m√©thode getSalarySlipsByPeriod (utilis√©e par HomeController).
    echo "üè† M√©thode HomeController (getSalarySlipsByPeriod):\n";
    try {
        // Tente de r√©cup√©rer les fiches de paie pour le mois en cours.
        $currentMonthSlips = $erpNextService->getSalarySlipsByPeriod($currentMonth, $endOfMonth);
        // Affiche le nombre de fiches trouv√©es.
        echo "‚úÖ Trouv√© " . count($currentMonthSlips) . " fiche(s) de paie\n";
        
        // Si des fiches sont trouv√©es, affiche les d√©tails des 5 premi√®res.
        if (!empty($currentMonthSlips)) {
            echo "üìã D√©tails des fiches trouv√©es:\n";
            foreach (array_slice($currentMonthSlips, 0, 5) as $slip) { // Affiche les 5 premi√®res fiches.
                echo "   - " . ($slip['name'] ?? 'N/A') . 
                     " | Employ√©: " . ($slip['employee_name'] ?? 'N/A') . 
                     " | P√©riode: " . ($slip['start_date'] ?? 'N/A') . " √† " . ($slip['end_date'] ?? 'N/A') .
                     " | Net: " . ($slip['net_pay'] ?? 0) . "‚Ç¨\n";
            }
            // Indique s'il y a plus de 5 fiches.
            if (count($currentMonthSlips) > 5) {
                echo "   ... et " . (count($currentMonthSlips) - 5) . " autre(s)\n";
            }
        }
    } catch (\Exception $e) {
        // Capture et affiche les erreurs sp√©cifiques √† cet appel.
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    }
    
    echo "\n" . str_repeat("-", 60) . "\n";
    
    // 2. V√©rification avec la m√©thode getSalarySlips (plus g√©n√©rale).
    echo "üîç M√©thode alternative (getSalarySlips):\n";
    try {
        // Tente de r√©cup√©rer les fiches de paie en utilisant des filtres de date.
        $allSlips = $erpNextService->getSalarySlips([
            'start_date' => $currentMonth,
            'end_date' => $endOfMonth,
        ]);
        // Affiche le nombre de fiches trouv√©es.
        echo "‚úÖ Trouv√© " . count($allSlips) . " fiche(s) de paie\n";
        
        // Si des fiches sont trouv√©es, affiche les d√©tails des 5 premi√®res.
        if (!empty($allSlips)) {
            echo "üìã D√©tails des fiches trouv√©es:\n";
            foreach (array_slice($allSlips, 0, 5) as $slip) {
                echo "   - " . ($slip['name'] ?? 'N/A') . 
                     " | Employ√©: " . ($slip['employee'] ?? 'N/A') . 
                     " | P√©riode: " . ($slip['start_date'] ?? 'N/A') . " √† " . ($slip['end_date'] ?? 'N/A') . "\n";
            }
        }
    } catch (\Exception $e) {
        // Capture et affiche les erreurs sp√©cifiques √† cet appel.
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    }
    
    echo "\n" . str_repeat("-", 60) . "\n";
    
    // 3. V√©rification de toutes les fiches de paie r√©centes (derniers 30 jours).
    echo "üìä Toutes les fiches des 30 derniers jours:\n";
    try {
        // Calcule la date il y a 30 jours et la date d'aujourd'hui.
        $last30Days = date('Y-m-d', strtotime('-30 days'));
        $today = date('Y-m-d');
        
        // R√©cup√®re les fiches de paie √† partir de la date calcul√©e.
        $recentSlips = $erpNextService->getSalarySlips([
            'start_date' => $last30Days,
        ]);
        
        // Affiche le nombre de fiches trouv√©es pour cette p√©riode.
        echo "‚úÖ Trouv√© " . count($recentSlips) . " fiche(s) de paie depuis $last30Days\n";
        
        // Si des fiches sont trouv√©es, les groupe par mois et affiche le d√©compte.
        if (!empty($recentSlips)) {
            $slipsByMonth = [];
            foreach ($recentSlips as $slip) {
                $startDate = $slip['start_date'] ?? '';
                if ($startDate) {
                    $month = date('Y-m', strtotime($startDate));
                    if (!isset($slipsByMonth[$month])) {
                        $slipsByMonth[$month] = [];
                    }
                    $slipsByMonth[$month][] = $slip;
                }
            }
            
            echo "üìÖ R√©partition par mois:\n";
            foreach ($slipsByMonth as $month => $slips) {
                echo "   - $month: " . count($slips) . " fiche(s)\n";
            }
        }
    } catch (\Exception $e) {
        // Capture et affiche les erreurs sp√©cifiques √† cet appel.
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    }
    
    echo "\n" . str_repeat("-", 60) . "\n";
    
    // 4. V√©rification avec la m√©thode utilis√©e par StatsController.
    echo "üìä M√©thode StatsController (getAllSalarySlips):\n";
    try {
        // R√©cup√®re toutes les fiches de paie pour l'ann√©e courante.
        $allSlipsForYear = $erpNextService->getAllSalarySlips($currentYear);
        // Affiche le nombre de fiches trouv√©es.
        echo "‚úÖ Trouv√© " . count($allSlipsForYear) . " fiche(s) de paie pour l'ann√©e $currentYear\n";
        
        // Si des fiches sont trouv√©es, affiche les d√©tails des 3 premi√®res et v√©rifie la compl√©tude.
        if (!empty($allSlipsForYear)) {
            echo "üìã D√©tails des fiches trouv√©es:\n";
            foreach (array_slice($allSlipsForYear, 0, 3) as $slip) {
                echo "   - " . ($slip['name'] ?? 'N/A') . 
                     " | Employ√©: " . ($slip['employee_name'] ?? $slip['employee'] ?? 'N/A') . 
                     " | P√©riode: " . ($slip['start_date'] ?? 'N/A') . " √† " . ($slip['end_date'] ?? 'N/A') .
                     " | Net: " . ($slip['net_pay'] ?? 0) . "‚Ç¨\n";
                
                // V√©rifie si les d√©tails des gains sont pr√©sents.
                if (isset($slip['earnings']) && is_array($slip['earnings'])) {
                    echo "     Gains: " . count($slip['earnings']) . " composant(s)\n";
                } else {
                    echo "     ‚ö†Ô∏è Aucun d√©tail de gains trouv√©\n";
                }
                
                // V√©rifie si les d√©tails des d√©ductions sont pr√©sents.
                if (isset($slip['deductions']) && is_array($slip['deductions'])) {
                    echo "     D√©ductions: " . count($slip['deductions']) . " composant(s)\n";
                } else {
                    echo "     ‚ö†Ô∏è Aucun d√©tail de d√©ductions trouv√©\n";
                }
            }
            // Indique s'il y a plus de 3 fiches.
            if (count($allSlipsForYear) > 3) {
                echo "   ... et " . (count($allSlipsForYear) - 3) . " autre(s)\n";
            }
        }
    } catch (\Exception $e) {
        // Capture et affiche les erreurs sp√©cifiques √† cet appel.
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    }
    
    echo "\n" . str_repeat("-", 60) . "\n";
    
    // 5. V√©rification des employ√©s actifs.
    echo "üë• Employ√©s actifs:\n";
    try {
        // R√©cup√®re la liste des employ√©s actifs.
        $employees = $erpNextService->getActiveEmployees();
        // Affiche le nombre d'employ√©s actifs trouv√©s.
        echo "‚úÖ Trouv√© " . count($employees) . " employ√©(s) actif(s)\n";
    } catch (\Exception $e) {
        // Capture et affiche les erreurs sp√©cifiques √† cet appel.
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    }
    
    // 6. V√©rification des structures salariales.
    echo "üèóÔ∏è Structures salariales:\n";
    try {
        // R√©cup√®re la liste des structures salariales.
        $structures = $erpNextService->getSalaryStructures();
        // Affiche le nombre de structures salariales trouv√©es.
        echo "‚úÖ Trouv√© " . count($structures) . " structure(s) salariale(s)\n";
    } catch (\Exception $e) {
        // Capture et affiche les erreurs sp√©cifiques √† cet appel.
        echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    }
    
    echo "\n" . str_repeat("=", 60) . "\n";
    echo "üéØ Recommandations:\n";
    
    // Section de recommandations bas√©e sur les r√©sultats du diagnostic.
    if (empty($currentMonthSlips)) {
        echo "‚ö†Ô∏è Aucune fiche de paie trouv√©e pour le mois en cours ($currentMonth √† $endOfMonth)\n";
        echo "üí° V√©rifiez que:\n";
        echo "   1. Les fiches ont √©t√© g√©n√©r√©es pour la bonne p√©riode\n";
        echo "   2. Les dates de d√©but/fin correspondent exactement\n";
        echo "   3. Les fiches sont bien soumises dans ERPNext\n";
        echo "   4. L'utilisateur API a les permissions de lecture\n";
    } else {
        echo "‚úÖ Les fiches de paie sont pr√©sentes et devraient s'afficher\n";
        echo "üí° Si elles ne s'affichent pas, v√©rifiez:\n";
        echo "   1. Le cache du navigateur\n";
        echo "   2. Les erreurs JavaScript dans la console\n";
        echo "   3. Les logs Symfony pour d'autres erreurs\n";
    }
    
} catch (Exception $e) {
    // Bloc de capture d'erreurs g√©n√©rales pour toute exception non g√©r√©e pr√©c√©demment.
    echo "‚ùå Erreur g√©n√©rale: " . $e->getMessage() . "\n";
    echo "üìù Trace: " . $e->getTraceAsString() . "\n";
}