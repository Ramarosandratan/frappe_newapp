<?php

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Dotenv\Dotenv;
use App\Service\ErpNextService;
use Symfony\Component\HttpClient\HttpClient;
use Psr\Log\NullLogger;

$dotenv = new Dotenv();
$dotenv->load(__DIR__.'/.env');

// Configuration ERPNext
$apiBase = $_ENV['API_BASE'] ?? 'http://erpnext.localhost:8000';
$apiKey = $_ENV['API_KEY'] ?? '';
$apiSecret = $_ENV['API_SECRET'] ?? '';

if (empty($apiKey) || empty($apiSecret)) {
    echo "‚ùå Erreur: Variables d'environnement ERPNext manquantes\n";
    exit(1);
}

// Cr√©er le service ERPNext
$httpClient = HttpClient::create();
$logger = new NullLogger();
$erpNextService = new ErpNextService($httpClient, $logger, $apiBase, $apiKey, $apiSecret);

echo "üß™ Test de la mise √† jour des montants de salaire\n";
echo "================================================\n\n";

try {
    // Test 1: V√©rifier la connexion
    echo "1. Test de connexion √† ERPNext...\n";
    $user = $erpNextService->findUserByEmail('ramarosandratana@hotmail.com');
    if ($user) {
        echo "   ‚úÖ Connexion r√©ussie\n\n";
    } else {
        echo "   ‚ùå √âchec de connexion\n";
        exit(1);
    }
    
    // Test 2: Cr√©er une fiche de paie de test avec montant de base
    echo "2. Test de cr√©ation de fiche de paie avec montant...\n";
    
    // Donn√©es de test - utilisons d√©cembre 2025 (p√©riode future mais dans l'ann√©e fiscale)
    $testData = [
        'employee' => 'HR-EMP-00027', // Remplacer par un ID d'employ√© existant
        'start_date' => '2025-12-01',
        'end_date' => '2025-12-31',
        'posting_date' => '2025-12-31',
        'salary_structure' => 'gasy1',
        'base' => 1500000.0
    ];
    
    echo "   Donn√©es de test:\n";
    echo "   - Employ√©: {$testData['employee']}\n";
    echo "   - P√©riode: {$testData['start_date']} √† {$testData['end_date']}\n";
    echo "   - Structure: {$testData['salary_structure']}\n";
    echo "   - Montant de base: " . number_format($testData['base'], 0, ',', ' ') . " Ar\n\n";
    
    // V√©rifier si l'employ√© existe
    $employee = $erpNextService->getEmployee($testData['employee']);
    if (!$employee) {
        echo "   ‚ùå Employ√© {$testData['employee']} introuvable\n";
        echo "   üí° Veuillez v√©rifier l'ID de l'employ√© dans ERPNext\n";
        exit(1);
    }
    
    // V√©rifier si la structure salariale existe
    $structure = $erpNextService->getSalaryStructure($testData['salary_structure']);
    if (!$structure) {
        echo "   ‚ùå Structure salariale {$testData['salary_structure']} introuvable\n";
        echo "   üí° Veuillez cr√©er la structure salariale d'abord\n";
        exit(1);
    }
    
    // Assigner la structure salariale √† l'employ√©
    echo "   Attribution de la structure salariale...\n";
    try {
        $assignmentDate = '2024-12-01'; // Date ant√©rieure √† la p√©riode de paie
        $erpNextService->assignSalaryStructure(
            $testData['employee'],
            $testData['salary_structure'],
            $assignmentDate
        );
        echo "   ‚úÖ Structure salariale assign√©e\n";
        
        // Attendre un peu pour que l'assignation soit enregistr√©e
        sleep(2);
        
        // Mettre √† jour le montant de base dans l'assignation
        echo "   Mise √† jour du montant de base dans l'assignation...\n";
        $erpNextService->updateSalaryStructureAssignmentBase(
            $testData['employee'],
            $testData['salary_structure'],
            $assignmentDate,
            $testData['base']
        );
        echo "   ‚úÖ Montant de base mis √† jour\n";
        
    } catch (\Throwable $e) {
        if (str_contains($e->getMessage(), 'DuplicateEntryError') || str_contains($e->getMessage(), 'already exists')) {
            echo "   ‚ÑπÔ∏è  Structure d√©j√† assign√©e\n";
            
            // Mettre √† jour le montant de base quand m√™me
            try {
                $erpNextService->updateSalaryStructureAssignmentBase(
                    $testData['employee'],
                    $testData['salary_structure'],
                    $assignmentDate,
                    $testData['base']
                );
                echo "   ‚úÖ Montant de base mis √† jour\n";
            } catch (\Throwable $e2) {
                echo "   ‚ö†Ô∏è  Erreur lors de la mise √† jour du montant: " . $e2->getMessage() . "\n";
            }
        } else {
            echo "   ‚ö†Ô∏è  Erreur lors de l'assignation: " . $e->getMessage() . "\n";
        }
    }
    
    // Cr√©er la fiche de paie
    echo "   Cr√©ation de la fiche de paie...\n";
    $result = $erpNextService->addSalarySlip($testData);
    
    if (isset($result['name'])) {
        echo "   ‚úÖ Fiche de paie cr√©√©e: {$result['name']}\n";
        
        // V√©rifier les montants
        echo "\n3. V√©rification des montants...\n";
        $salarySlip = $erpNextService->getResource('Salary Slip', $result['name']);
        
        if ($salarySlip) {
            echo "   Montants calcul√©s:\n";
            echo "   - Total gains: " . number_format($salarySlip['total_earning'] ?? 0, 0, ',', ' ') . " Ar\n";
            echo "   - Total d√©ductions: " . number_format($salarySlip['total_deduction'] ?? 0, 0, ',', ' ') . " Ar\n";
            echo "   - Salaire net: " . number_format($salarySlip['net_pay'] ?? 0, 0, ',', ' ') . " Ar\n\n";
            
            // V√©rifier les composants
            if (isset($salarySlip['earnings']) && is_array($salarySlip['earnings'])) {
                echo "   D√©tail des gains:\n";
                foreach ($salarySlip['earnings'] as $earning) {
                    $component = $earning['salary_component'] ?? 'Inconnu';
                    $amount = $earning['amount'] ?? 0;
                    echo "   - $component: " . number_format($amount, 0, ',', ' ') . " Ar\n";
                }
            }
            
            if (isset($salarySlip['deductions']) && is_array($salarySlip['deductions'])) {
                echo "\n   D√©tail des d√©ductions:\n";
                foreach ($salarySlip['deductions'] as $deduction) {
                    $component = $deduction['salary_component'] ?? 'Inconnu';
                    $amount = $deduction['amount'] ?? 0;
                    echo "   - $component: " . number_format($amount, 0, ',', ' ') . " Ar\n";
                }
            }
            
            // V√©rifier si les montants sont corrects
            $expectedSalaryBase = 1500000;
            $expectedIndemnity = $expectedSalaryBase * 0.3;
            $expectedTax = ($expectedSalaryBase + $expectedIndemnity) * 0.2;
            $expectedNet = ($expectedSalaryBase + $expectedIndemnity) - $expectedTax;
            
            echo "\n   Montants attendus:\n";
            echo "   - Salaire de base: " . number_format($expectedSalaryBase, 0, ',', ' ') . " Ar\n";
            echo "   - Indemnit√© (30%): " . number_format($expectedIndemnity, 0, ',', ' ') . " Ar\n";
            echo "   - Taxe sociale (20%): " . number_format($expectedTax, 0, ',', ' ') . " Ar\n";
            echo "   - Salaire net: " . number_format($expectedNet, 0, ',', ' ') . " Ar\n\n";
            
            $actualNet = $salarySlip['net_pay'] ?? 0;
            if (abs($actualNet - $expectedNet) < 1) {
                echo "   ‚úÖ Les montants sont corrects !\n";
            } else {
                echo "   ‚ö†Ô∏è  Diff√©rence d√©tect√©e dans les montants\n";
                echo "   Attendu: " . number_format($expectedNet, 0, ',', ' ') . " Ar\n";
                echo "   Obtenu: " . number_format($actualNet, 0, ',', ' ') . " Ar\n";
            }
        } else {
            echo "   ‚ùå Impossible de r√©cup√©rer la fiche de paie cr√©√©e\n";
        }
    } else {
        echo "   ‚ùå √âchec de cr√©ation de la fiche de paie\n";
        print_r($result);
    }
    
} catch (\Throwable $e) {
    echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    echo "Trace: " . $e->getTraceAsString() . "\n";
}

echo "\nüèÅ Test termin√©\n";