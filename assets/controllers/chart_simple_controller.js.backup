import { Controller } from '@hotwired/stimulus';

export default class extends Controller {
    connect() {
        console.log('Chart simple controller connected');
        this.setupEventListeners();
        this.findAndConnectChart();
    }

    findAndConnectChart() {
        // Wait for Chart.js to be available
        this.waitForChart().then(() => {
            // Attendre un peu que le graphique soit rendu
            setTimeout(() => {
                const canvas = document.querySelector('canvas');
                if (canvas) {
                    console.log('Canvas and Chart.js found');
                    
                    // Essayer différentes méthodes pour obtenir l'instance du graphique
                    let chart = null;
                    
                    // Méthode 1: Chart.getChart
                    if (window.Chart.getChart) {
                        chart = window.Chart.getChart(canvas);
                    }
                    
                    // Méthode 2: propriété chart sur le canvas
                    if (!chart && canvas.chart) {
                        chart = canvas.chart;
                    }
                    
                    // Méthode 3: propriété _chart sur le canvas
                    if (!chart && canvas._chart) {
                        chart = canvas._chart;
                    }
                    
                    if (chart) {
                        console.log('Chart instance found:', chart);
                        this.chart = chart;
                        this.initializeCheckboxes();
                    } else {
                        console.log('Chart instance not found, retrying...');
                        // Réessayer après un délai plus long
                        setTimeout(() => this.findAndConnectChart(), 1000);
                    }
                } else {
                    console.log('Canvas not ready, retrying...');
                    setTimeout(() => this.findAndConnectChart(), 500);
                }
            }, 100);
        }).catch(() => {
            console.error('Chart.js failed to load');
        });
    }

    waitForChart() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 50; // 5 seconds max
            
            const checkChart = () => {
                if (typeof window.Chart !== 'undefined') {
                    console.log('Chart.js is now available, version:', window.Chart.version);
                    resolve();
                } else if (attempts < maxAttempts) {
                    attempts++;
                    setTimeout(checkChart, 100);
                } else {
                    reject(new Error('Chart.js failed to load after 5 seconds'));
                }
            };
            
            checkChart();
        });
    }

    initializeCheckboxes() {
        if (!this.chart) return;

        console.log('Initializing checkboxes...');
        const checkboxes = document.querySelectorAll('#componentCheckboxes input[type="checkbox"]');
        
        checkboxes.forEach((checkbox) => {
            const componentName = checkbox.value;
            const datasetIndex = this.chart.data.datasets.findIndex(dataset => 
                dataset.label === componentName
            );

            if (datasetIndex !== -1) {
                const isVisible = this.chart.isDatasetVisible(datasetIndex);
                checkbox.checked = isVisible;
                console.log(`Checkbox for "${componentName}" set to:`, isVisible);
            }
        });
    }

    setupEventListeners() {
        console.log('Setting up event listeners...');

        // Type de graphique
        const chartTypeSelect = document.getElementById('chartType');
        if (chartTypeSelect) {
            chartTypeSelect.addEventListener('change', (event) => {
                this.changeChartType(event.target.value);
            });
        }

        // Checkboxes des composants
        const checkboxes = document.querySelectorAll('#componentCheckboxes input[type="checkbox"]');
        checkboxes.forEach((checkbox) => {
            checkbox.addEventListener('change', (event) => {
                this.toggleDatasetVisibility(event.target.value, event.target.checked);
            });
        });
    }

    changeChartType(newType) {
        if (!this.chart) {
            console.log('No chart available for type change');
            return;
        }

        console.log('Changing chart type to:', newType);
        try {
            this.chart.config.type = newType;
            this.chart.update();
            console.log('Chart type changed successfully');
        } catch (error) {
            console.error('Error changing chart type:', error);
        }
    }

    toggleDatasetVisibility(componentName, isVisible) {
        if (!this.chart) {
            console.log('No chart available for dataset toggle');
            return;
        }

        console.log('Toggling dataset:', componentName, 'to', isVisible);
        
        try {
            const datasetIndex = this.chart.data.datasets.findIndex(dataset => 
                dataset.label === componentName
            );

            if (datasetIndex !== -1) {
                this.chart.setDatasetVisibility(datasetIndex, isVisible);
                this.chart.update();
                console.log('Dataset visibility toggled successfully');
            } else {
                console.warn('Dataset not found:', componentName);
            }
        } catch (error) {
            console.error('Error toggling dataset:', error);
        }
    }
}